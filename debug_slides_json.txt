[
  {
    "title": "Java Basics Fundamentals"
  },
  {
    "title": "Introduction to Java",
    "content": [
      {
        "text": "Java is an **object-oriented** programming language that is used for developing **large-scale** applications, including **Android apps**, **web applications**, and **enterprise software**.",
        "subpoints": [
          "Known for its **platform independence**",
          "Uses **Java Virtual Machine (JVM)** for execution",
          "Has a **large community** of developers"
        ]
      },
      {
        "text": "Java is used in various industries, including **finance**, **healthcare**, and **education**, due to its **robustness** and **scalability**."
      },
      {
        "text": "**Simple** and **familiar** syntax makes Java easy to learn for beginners, with a focus on **readability** and **maintainability**."
      },
      {
        "text": "Java supports **multithreading**, allowing for **concurrent execution** of threads, which improves **application performance**."
      },
      {
        "text": "Java has a **vast ecosystem** of libraries and frameworks, including **Spring** and **Hibernate**, that simplify development."
      }
    ],
    "notes": "Java's popularity stems from its versatility and the vast number of resources available.",
    "image_url": "java-programming-language"
  },
  {
    "title": "Java Syntax Basics",
    "content": [
      {
        "text": "Java's syntax is based on **C++**, with a focus on **simplicity** and **clarity**, making it easier to write **efficient** code."
      },
      {
        "text": "Java programs are composed of **classes** and **objects**, with **inheritance** and **polymorphism** being key **OOP concepts**."
      },
      {
        "text": "**Variables** in Java are declared with a specific **data type**, such as **int**, **double**, or **String**."
      },
      {
        "text": "Java supports various **operators**, including **arithmetic**, **comparison**, and **logical** operators, for **expression evaluation**."
      },
      {
        "text": "**Control structures**, such as **if-else** statements and **loops**, control the **flow** of a Java program."
      }
    ],
    "code": {
      "title": "Variable Declaration Example",
      "snippet": "public class Variables {\n    public static void main(String[] args) {\n        int count = 10;\n        double price = 19.99;\n        String name = \"John\";\n        System.out.println(\"Count: \" + count);\n        System.out.println(\"Price: \" + price);\n        System.out.println(\"Name: \" + name);\n    }\n}"
    }
  },
  {
    "title": "Object-Oriented Programming in Java",
    "content": [
      {
        "text": "**Encapsulation** is the concept of bundling **data** and **methods** that operate on that data within a single unit, called a **class**."
      },
      {
        "text": "**Inheritance** allows one class to **inherit** properties and behavior from another class, promoting **code reuse**."
      },
      {
        "text": "**Polymorphism** enables objects of different classes to be treated as objects of a common superclass, using **method overriding** or **method overloading**."
      },
      {
        "text": "**Abstraction** involves hiding implementation details and showing only the necessary information to the outside world, using **abstract classes** or **interfaces**."
      },
      {
        "text": "Java supports **constructors** for initializing objects when they are created, and **this** keyword for referencing the current object."
      }
    ],
    "code": {
      "title": "Inheritance Example",
      "snippet": "public class Animal {\n    void sound() {\n        System.out.println(\"The animal makes a sound\");\n    }\n}\n\npublic class Dog extends Animal {\n    void sound() {\n        System.out.println(\"The dog barks\");\n    }\n    public static void main(String[] args) {\n        Dog myDog = new Dog();\n        myDog.sound();\n    }\n}"
    }
  },
  {
    "title": "Java Collections Framework",
    "content": [
      {
        "text": "The Java **Collections Framework** provides a set of classes and interfaces for **storing** and **manipulating** groups of objects."
      },
      {
        "text": "**List**, **Set**, and **Map** are the primary interfaces in the Collections Framework, each representing a different type of **collection**."
      },
      {
        "text": "**ArrayList** and **LinkedList** are implementations of the **List** interface, offering different **performance characteristics**."
      },
      {
        "text": "**HashSet** and **TreeSet** are implementations of the **Set** interface, providing **unique element** storage with different **ordering**."
      },
      {
        "text": "Java Collections Framework provides various **algorithms**, such as **sorting** and **searching**, for manipulating collections."
      }
    ],
    "notes": "Understanding the Collections Framework is crucial for effective data management in Java.",
    "image_url": "java-collections-framework"
  }
]