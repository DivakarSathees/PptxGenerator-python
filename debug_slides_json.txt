[
  {
    "title": "C# Inheritance Fundamentals"
  },
  {
    "title": "Introduction to Inheritance",
    "content": [
      {
        "text": "Inheritance in C# allows one class to **inherit** the properties and behavior of another class, promoting **code reuse** and facilitating the creation of a **hierarchy** of related classes.",
        "subpoints": [
          "The **derived class** inherits from a **base class**",
          "Inherits all **public** and **protected** members",
          "Can add new members or **override** existing ones"
        ]
      },
      {
        "text": "The **derived class** has access to all **public** and **protected** members of the **base class**, allowing for a more specialized implementation."
      },
      {
        "text": "Inheritance is a key feature of **object-oriented programming (OOP)**, enabling the modeling of complex relationships between classes."
      },
      {
        "text": "C# supports **single inheritance**, where a class can inherit from only one **base class**."
      },
      {
        "text": "Inheritance helps in creating a more **maintainable** and **scalable** codebase by reducing **code duplication**."
      }
    ],
    "notes": "Inheritance is fundamental to OOP and is used extensively in C# for building robust applications."
  },
  {
    "title": "Implementing Inheritance",
    "content": [
      {
        "text": "To implement inheritance in C#, you define a **base class** and a **derived class** using the **':'** operator.",
        "subpoints": [
          "The **derived class** constructor can call the **base class** constructor using **': base()'**",
          "Can **override** **virtual** methods of the **base class**",
          "Can use **base** keyword to access **base class** members"
        ]
      },
      {
        "text": "The **derived class** can **hide** members of the **base class** using the **'new'** keyword, although this is generally discouraged in favor of **overriding**."
      },
      {
        "text": "Inheritance allows for more **specialized** classes to be created from more **general** ones, enhancing **code flexibility**."
      },
      {
        "text": "**Sealed classes** cannot be inherited from, providing a way to restrict inheritance."
      },
      {
        "text": "C# also supports **abstract classes** that cannot be instantiated on their own and are meant to be inherited."
      }
    ],
    "code": {
      "title": "Basic Inheritance Example",
      "snippet": "public class Animal\n{\n    public virtual void Sound()\n    {\n        Console.WriteLine(\"The animal makes a sound\");\n    }\n}\n\npublic class Dog : Animal\n{\n    public override void Sound()\n    {\n        Console.WriteLine(\"The dog barks\");\n    }\n}\n\nDog myDog = new Dog();\nmyDog.Sound();"
    }
  },
  {
    "title": "Benefits and Best Practices",
    "content": [
      {
        "text": "Inheritance promotes **code reuse** by allowing **derived classes** to inherit common logic from a **base class**, thus reducing **code duplication**."
      },
      {
        "text": "It facilitates the creation of a **hierarchical** structure of classes, making the code more **organized** and easier to understand."
      },
      {
        "text": "When using inheritance, it's essential to follow the **Liskov Substitution Principle (LSP)**, ensuring that **derived classes** can be used wherever the **base class** is expected."
      },
      {
        "text": "Prefer **composition** over inheritance when possible, as it offers more **flexibility** and avoids **tight coupling** between classes."
      },
      {
        "text": "Use **abstract classes** and **interfaces** to define contracts that must be implemented by **derived classes**, enhancing **code maintainability**."
      }
    ],
    "notes": "While inheritance is powerful, it should be used judiciously, balancing the benefits against potential complexities."
  },
  {
    "title": "Common Pitfalls",
    "content": [
      {
        "text": "One of the common pitfalls of inheritance is creating a deep **hierarchy** that becomes difficult to understand and maintain."
      },
      {
        "text": "Overusing inheritance can lead to **tight coupling** between classes, making it harder to modify one class without affecting others."
      },
      {
        "text": "Not following the **Liskov Substitution Principle (LSP)** can result in **derived classes** that behave unexpectedly when treated as their **base class**."
      },
      {
        "text": "Using inheritance solely for **code reuse** without a clear **'is-a'** relationship can lead to **design issues**."
      },
      {
        "text": "Failing to **override** or **hide** members appropriately can result in unexpected behavior when working with **polymorphic** objects."
      }
    ],
    "image_url": "inheritance-pitfalls-diagram"
  }
]